// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package function_worker_service

import (
	context "context"
	messages "github.com/graphql-editor/graphql_editor_messages/go/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FunctionWorkerServiceClient is the client API for FunctionWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionWorkerServiceClient interface {
	CreateFunction(ctx context.Context, in *messages.CreateFunctionRequest, opts ...grpc.CallOption) (*messages.CreateFunctionResponse, error)
	UpdateFunction(ctx context.Context, in *messages.UpdateFunctionRequest, opts ...grpc.CallOption) (*messages.UpdateFunctionResponse, error)
	DeleteFunction(ctx context.Context, in *messages.DeleteFunctionRequest, opts ...grpc.CallOption) (*messages.DeleteFunctionResponse, error)
	LogStream(ctx context.Context, in *messages.LogStreamRequest, opts ...grpc.CallOption) (*messages.LogStreamResponse, error)
}

type functionWorkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionWorkerServiceClient(cc grpc.ClientConnInterface) FunctionWorkerServiceClient {
	return &functionWorkerServiceClient{cc}
}

func (c *functionWorkerServiceClient) CreateFunction(ctx context.Context, in *messages.CreateFunctionRequest, opts ...grpc.CallOption) (*messages.CreateFunctionResponse, error) {
	out := new(messages.CreateFunctionResponse)
	err := c.cc.Invoke(ctx, "/graphqleditor.function_worker_service.FunctionWorkerService/CreateFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionWorkerServiceClient) UpdateFunction(ctx context.Context, in *messages.UpdateFunctionRequest, opts ...grpc.CallOption) (*messages.UpdateFunctionResponse, error) {
	out := new(messages.UpdateFunctionResponse)
	err := c.cc.Invoke(ctx, "/graphqleditor.function_worker_service.FunctionWorkerService/UpdateFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionWorkerServiceClient) DeleteFunction(ctx context.Context, in *messages.DeleteFunctionRequest, opts ...grpc.CallOption) (*messages.DeleteFunctionResponse, error) {
	out := new(messages.DeleteFunctionResponse)
	err := c.cc.Invoke(ctx, "/graphqleditor.function_worker_service.FunctionWorkerService/DeleteFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionWorkerServiceClient) LogStream(ctx context.Context, in *messages.LogStreamRequest, opts ...grpc.CallOption) (*messages.LogStreamResponse, error) {
	out := new(messages.LogStreamResponse)
	err := c.cc.Invoke(ctx, "/graphqleditor.function_worker_service.FunctionWorkerService/LogStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionWorkerServiceServer is the server API for FunctionWorkerService service.
// All implementations must embed UnimplementedFunctionWorkerServiceServer
// for forward compatibility
type FunctionWorkerServiceServer interface {
	CreateFunction(context.Context, *messages.CreateFunctionRequest) (*messages.CreateFunctionResponse, error)
	UpdateFunction(context.Context, *messages.UpdateFunctionRequest) (*messages.UpdateFunctionResponse, error)
	DeleteFunction(context.Context, *messages.DeleteFunctionRequest) (*messages.DeleteFunctionResponse, error)
	LogStream(context.Context, *messages.LogStreamRequest) (*messages.LogStreamResponse, error)
	mustEmbedUnimplementedFunctionWorkerServiceServer()
}

// UnimplementedFunctionWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFunctionWorkerServiceServer struct {
}

func (UnimplementedFunctionWorkerServiceServer) CreateFunction(context.Context, *messages.CreateFunctionRequest) (*messages.CreateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunction not implemented")
}
func (UnimplementedFunctionWorkerServiceServer) UpdateFunction(context.Context, *messages.UpdateFunctionRequest) (*messages.UpdateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunction not implemented")
}
func (UnimplementedFunctionWorkerServiceServer) DeleteFunction(context.Context, *messages.DeleteFunctionRequest) (*messages.DeleteFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunction not implemented")
}
func (UnimplementedFunctionWorkerServiceServer) LogStream(context.Context, *messages.LogStreamRequest) (*messages.LogStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogStream not implemented")
}
func (UnimplementedFunctionWorkerServiceServer) mustEmbedUnimplementedFunctionWorkerServiceServer() {}

// UnsafeFunctionWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionWorkerServiceServer will
// result in compilation errors.
type UnsafeFunctionWorkerServiceServer interface {
	mustEmbedUnimplementedFunctionWorkerServiceServer()
}

func RegisterFunctionWorkerServiceServer(s grpc.ServiceRegistrar, srv FunctionWorkerServiceServer) {
	s.RegisterService(&FunctionWorkerService_ServiceDesc, srv)
}

func _FunctionWorkerService_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionWorkerServiceServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphqleditor.function_worker_service.FunctionWorkerService/CreateFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionWorkerServiceServer).CreateFunction(ctx, req.(*messages.CreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionWorkerService_UpdateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionWorkerServiceServer).UpdateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphqleditor.function_worker_service.FunctionWorkerService/UpdateFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionWorkerServiceServer).UpdateFunction(ctx, req.(*messages.UpdateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionWorkerService_DeleteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.DeleteFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionWorkerServiceServer).DeleteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphqleditor.function_worker_service.FunctionWorkerService/DeleteFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionWorkerServiceServer).DeleteFunction(ctx, req.(*messages.DeleteFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionWorkerService_LogStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.LogStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionWorkerServiceServer).LogStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphqleditor.function_worker_service.FunctionWorkerService/LogStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionWorkerServiceServer).LogStream(ctx, req.(*messages.LogStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FunctionWorkerService_ServiceDesc is the grpc.ServiceDesc for FunctionWorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunctionWorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graphqleditor.function_worker_service.FunctionWorkerService",
	HandlerType: (*FunctionWorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFunction",
			Handler:    _FunctionWorkerService_CreateFunction_Handler,
		},
		{
			MethodName: "UpdateFunction",
			Handler:    _FunctionWorkerService_UpdateFunction_Handler,
		},
		{
			MethodName: "DeleteFunction",
			Handler:    _FunctionWorkerService_DeleteFunction_Handler,
		},
		{
			MethodName: "LogStream",
			Handler:    _FunctionWorkerService_LogStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "function_worker_service/service.proto",
}
